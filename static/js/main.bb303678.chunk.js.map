{"version":3,"sources":["utils/types.ts","utils/constants/colors.ts","components/Form/Form.styles.ts","components/PizzaDetails/PizzaDetails.tsx","components/SoupDetails/SoupDetails.constants.ts","components/SoupDetails/SoupDetails.tsx","components/SandwichDetails/SandwichDetails.tsx","api/api.ts","components/Form/Form.tsx","App.tsx","index.tsx"],"names":["DISH_TYPE","colors","initialValues","name","preparationTime","type","noOfSlices","undefined","diameter","spicinessScale","slicesOfBread","validatedValues","dishTypes","value","label","Container","styled","div","backgroundType","PIZZA","SANDWICH","SOUP","FieldsWrapper","Header","span","Label","isCorrect","Input","input","TimeInput","Select","select","StyledOption","option","ButtonsWrapper","SubmitButton","button","disabled","ClearButton","PizzaDetails","inputsValues","onInputChange","validateInput","isValid","min","id","onChange","onBlur","SoupDetails","useState","isSpicinessSelected","setIsSpicinessSelected","event","map","spiciness","SandwichDetails","postFormValues","values","a","axios","post","Form","setInputsValues","isValidated","setIsValidated","postForm","console","warn","handleInputChange","target","isValueEmpty","trim","isFormValid","step","dishType","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb303678.chunk.js","sourcesContent":["import { ChangeEvent } from 'react';\r\n\r\nexport type InputEvent = ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement>\r\n\r\nexport interface InputsValues {\r\n    name: string;\r\n    preparationTime: string;\r\n    type: string;\r\n    noOfSlices?: number;\r\n    diameter?: number;\r\n    spicinessScale?: number;\r\n    slicesOfBread?: number;\r\n}\r\n\r\nexport const initialValues = {\r\n    name: '',\r\n    preparationTime: '',\r\n    type: '',\r\n    noOfSlices: undefined,\r\n    diameter: undefined,\r\n    spicinessScale: undefined,\r\n    slicesOfBread: undefined,\r\n}\r\n\r\nexport interface FormValidation {\r\n    name?: boolean;\r\n    preparationTime?: boolean;\r\n    type?: boolean;\r\n    noOfSlices?: boolean;\r\n    diameter?: boolean;\r\n    spicinessScale?: boolean;\r\n    slicesOfBread?: boolean;\r\n}\r\n\r\nexport const validatedValues = {\r\n    name: undefined,\r\n    preparationTime: undefined,\r\n    type: undefined,\r\n    noOfSlices: undefined,\r\n    diameter: undefined,\r\n    spicinessScale: undefined,\r\n    slicesOfBread: undefined,\r\n}\r\n\r\nexport enum DISH_TYPE {\r\n    PIZZA = 'pizza',\r\n    SOUP = 'soup',\r\n    SANDWICH = 'sandwich',\r\n}\r\n\r\nexport const dishTypes = [\r\n    { value: '', label: 'Dish type' },\r\n    { value: 'pizza', label: 'Pizza' },\r\n    { value: 'soup', label: 'Soup' },\r\n    { value: 'sandwich', label: 'Sandwich' }\r\n];","export const colors = {\r\n    black: '#000000',\r\n    backgroundGrey: '#222222',\r\n    backgroundGreyLighter: '#494949',\r\n    clearButtonGrey: '#9b9999',\r\n    green: '#34A853',\r\n    greenHover: '#2C8E46',\r\n    inputGrey: '#555555',\r\n    inputGreyHover: '#999999',\r\n    red: '#E94235',\r\n    redHover: '#D13A30',\r\n    transparent: 'transparent',\r\n    white: '#FFFFFF',\r\n}","import styled from 'styled-components';\r\nimport { colors } from '../../utils/constants/colors';\r\nimport { DISH_TYPE } from '../../utils/types';\r\n\r\ninterface ContainerProps {\r\n    backgroundType: string;\r\n}\r\n\r\nexport const Container = styled.div<ContainerProps>`\r\n    align-items: end;\r\n    background-image: url('./img/mainBackground.jpg');\r\n    background-image: ${({backgroundType}) => {\r\n        return backgroundType === undefined\r\n            ?  `url('./img/mainBackground.jpg')`\r\n            : backgroundType === DISH_TYPE.PIZZA\r\n                ? `url('./img/pizza.jpg')`\r\n                : backgroundType === DISH_TYPE.SANDWICH\r\n                    ? `url('./img/sandwich.jpg')`\r\n                    : backgroundType === DISH_TYPE.SOUP\r\n                        && `url('./img/soup.jpg')`\r\n    }};\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    min-height: 100vh;\r\n    width: 100vw;\r\n`;\r\n\r\nexport const FieldsWrapper = styled.div`\r\n    background-color: rgb(34, 34, 34, .5);\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-right: 100px;\r\n    padding: 30px 20px 40px 20px;\r\n`;\r\n\r\nexport const Header = styled.span`\r\n    color: ${colors.white};\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n    letter-spacing: 0.09em;\r\n    margin-bottom: 15px;\r\n    text-align: center;\r\n`;\r\n\r\ninterface LabelProps {\r\n    isCorrect?: boolean;\r\n}\r\n\r\nexport const Label = styled.span<LabelProps>`\r\n    color: ${({isCorrect}) => {\r\n        return isCorrect === undefined \r\n            ? `${colors.white}`\r\n            : isCorrect \r\n                ? `${colors.green}`\r\n                : `${colors.red}`\r\n    }};\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n    letter-spacing: 0.09em;\r\n    margin-bottom: 5px;\r\n    transition: color .5s ease-in-out;\r\n\r\n    &:hover {\r\n        color: ${({isCorrect}) => {\r\n            return isCorrect === undefined \r\n                ? `${colors.white}`\r\n                : isCorrect \r\n                    ? `${colors.green}`\r\n                    : `${colors.red}`\r\n        }};\r\n    }\r\n`;\r\n\r\ninterface InputProps {\r\n    isCorrect?: boolean;\r\n}\r\n\r\nexport const Input = styled.input<InputProps>`\r\n    background-color: ${colors.backgroundGrey};\r\n    border: ${({isCorrect}) => {\r\n        return isCorrect === undefined \r\n            ? `1px solid ${colors.backgroundGreyLighter}` \r\n            : isCorrect \r\n                ? `1px solid ${colors.green}`\r\n                : `1px solid ${colors.red}`\r\n    }};\r\n    box-sizing: border-box;\r\n    color: ${colors.white};\r\n    font-size: 14px;\r\n    letter-spacing: 0.09em;\r\n    margin-bottom: 15px;\r\n    padding: 17px 0 17px 18px;\r\n    transition: border .5s ease-in-out;\r\n    width: 400px;\r\n\r\n    &:hover {\r\n        border: ${({isCorrect}) => {\r\n            return isCorrect === undefined \r\n                ? `1px solid ${colors.inputGreyHover}` \r\n                : isCorrect \r\n                    ? `1px solid ${colors.greenHover}`\r\n                    : `1px solid ${colors.redHover}`\r\n        }};\r\n    }\r\n\r\n    &::-webkit-inner-spin-button {\r\n        display: none;\r\n    }\r\n`\r\n\r\nexport const TimeInput = styled(Input)`\r\n    & {\r\n        font-family: 'Segoe UI', 'Roboto', 'Oxygen';\r\n        font-weight: 500;\r\n    }\r\n\r\n    &::-webkit-datetime-edit-text {\r\n        padding: 0 3px;\r\n    }\r\n\r\n    &::-webkit-calendar-picker-indicator {\r\n        display: none;\r\n    }\r\n`;\r\n\r\ninterface SelectProps {\r\n    isCorrect?: boolean;\r\n}\r\n\r\nexport const Select = styled.select<SelectProps>`\r\n    background-color: ${colors.backgroundGrey};\r\n    border: ${({isCorrect}) => {\r\n        return isCorrect === undefined \r\n            ? `1px solid ${colors.backgroundGreyLighter}` \r\n            : isCorrect \r\n                ? `1px solid ${colors.green}`\r\n                : `1px solid ${colors.red}`\r\n    }};\r\n    color: ${colors.white};\r\n    cursor: pointer;\r\n    font-size: 14px;\r\n    letter-spacing: 0.09em;\r\n    margin-bottom: 15px;\r\n    padding: 17px 18px;\r\n    transition: border .5s ease-in-out;\r\n    width: 400px;\r\n\r\n    &:hover {\r\n        border: ${({isCorrect}) => {\r\n        return isCorrect === undefined \r\n            ? `1px solid ${colors.inputGreyHover}` \r\n            : isCorrect \r\n                ? `1px solid ${colors.greenHover}`\r\n                : `1px solid ${colors.redHover}`\r\n        }};\r\n    }\r\n`;\r\n\r\nexport const StyledOption = styled.option`\r\n    background-color: ${colors.backgroundGrey};\r\n    font-size: 14px;\r\n    letter-spacing: 0.04em;\r\n`;\r\n\r\nexport const ButtonsWrapper = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nexport const SubmitButton = styled.button`\r\n    background-color: ${({disabled}) => disabled ? colors.inputGrey : colors.black};\r\n    border: none;\r\n    color: ${colors.white};\r\n    cursor: pointer;\r\n    display: flex;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    letter-spacing: 0.09em;\r\n    padding: 12px 22px 12px 18px;\r\n    width: 100%;\r\n`;\r\n\r\nexport const ClearButton = styled(SubmitButton)`\r\n    background-color: ${colors.clearButtonGrey};\r\n    justify-content: center;\r\n    margin-left: 10px;\r\n    width: 150px;\r\n`;","import React from 'react';\r\nimport { InputEvent, InputsValues, FormValidation } from '../../utils/types';\r\nimport { Input, Label } from '../Form/Form.styles';\r\n\r\ninterface PizzaDetailsProps {\r\n    inputsValues: InputsValues;\r\n    onInputChange: (event: InputEvent) => void;\r\n    validateInput: (event: InputEvent) => void;\r\n    isValid: FormValidation;\r\n}\r\n\r\nexport const PizzaDetails: React.FC<PizzaDetailsProps> = ({ inputsValues, onInputChange, validateInput, isValid }) => {\r\n    return (\r\n        <>\r\n            <Label isCorrect={isValid.noOfSlices}>No of slices</Label>\r\n            <Input\r\n                type={'number'}\r\n                min={'0'}\r\n                id={'noOfSlices'}\r\n                value={inputsValues.noOfSlices}\r\n                onChange={onInputChange}\r\n                onBlur={validateInput}\r\n                isCorrect={isValid.noOfSlices}\r\n            />\r\n            <Label isCorrect={isValid.diameter}>Diameter</Label>\r\n            <Input\r\n                type={'number'}\r\n                min={'0'}\r\n                id={'diameter'}\r\n                value={inputsValues.diameter}\r\n                onChange={onInputChange}\r\n                onBlur={validateInput}\r\n                isCorrect={isValid.diameter}\r\n            />\r\n        </>\r\n    );\r\n};","export const spicinessScale = [\r\n    { value: '', label: 'Spiciness scale' },\r\n    { value: '1', label: '1' },\r\n    { value: '2', label: '2' },\r\n    { value: '3', label: '3' },\r\n    { value: '4', label: '4' },\r\n    { value: '5', label: '5' },\r\n    { value: '6', label: '6' },\r\n    { value: '7', label: '7' },\r\n    { value: '8', label: '8' },\r\n    { value: '9', label: '9' },\r\n    { value: '10', label: '10' }\r\n];","import React, { useState } from 'react';\r\nimport { InputEvent, InputsValues, FormValidation } from '../../utils/types';\r\nimport { Label, Select, StyledOption } from '../Form/Form.styles';\r\nimport { spicinessScale } from './SoupDetails.constants';\r\n\r\ninterface SoupDetailsProps {\r\n    inputsValues: InputsValues;\r\n    onInputChange: (event: InputEvent) => void;\r\n    validateInput: (event: InputEvent) => void;\r\n    isValid: FormValidation;\r\n}\r\n\r\nexport const SoupDetails: React.FC<SoupDetailsProps> = ({ inputsValues, onInputChange, validateInput, isValid }) => {\r\n    const [isSpicinessSelected, setIsSpicinessSelected] = useState<boolean>(false);\r\n\r\n    const selectSpiciness = (event: InputEvent) => {\r\n        onInputChange(event);\r\n        setIsSpicinessSelected(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Label isCorrect={isValid.spicinessScale}>Spiciness scale</Label>\r\n            <Select\r\n                id={'spicinessScale'}\r\n                value={inputsValues.spicinessScale}\r\n                onChange={selectSpiciness}\r\n                onBlur={validateInput}\r\n                isCorrect={isValid.spicinessScale}\r\n            >\r\n                {spicinessScale.map(spiciness => {\r\n                    return (\r\n                        <StyledOption \r\n                            disabled={isSpicinessSelected && spiciness.label === 'Spiciness scale'} \r\n                            value={spiciness.value} \r\n                            key={spiciness.value}\r\n                        >\r\n                            {spiciness.label}\r\n                        </StyledOption>\r\n                    )\r\n                })}\r\n            </Select>\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport { InputEvent, InputsValues, FormValidation } from '../../utils/types';\r\nimport { Input, Label } from '../Form/Form.styles';\r\n\r\ninterface SandwichDetailsProps {\r\n    inputsValues: InputsValues;\r\n    onInputChange: (event: InputEvent) => void;\r\n    validateInput: (event: InputEvent) => void;\r\n    isValid: FormValidation;\r\n}\r\n\r\nexport const SandwichDetails: React.FC<SandwichDetailsProps> = ({ inputsValues, onInputChange, validateInput, isValid  }) => {\r\n    return (\r\n        <>\r\n            <Label isCorrect={isValid.slicesOfBread}>Slices of bread</Label>\r\n            <Input\r\n                type={'number'}\r\n                min={'0'}\r\n                id={'slicesOfBread'}\r\n                value={inputsValues.slicesOfBread}\r\n                onChange={onInputChange}\r\n                onBlur={validateInput}\r\n                isCorrect={isValid.slicesOfBread}\r\n        />\r\n        </>\r\n    );\r\n};","import { InputsValues } from \"../utils/types\"\r\nimport axios from 'axios';\r\n\r\nexport const postFormValues = async (values: InputsValues) => {\r\n    await axios.post('https://frosty-wood-6558.getsandbox.com:443/dishes', values)\r\n}","import React, { useState } from 'react';\r\nimport { PizzaDetails } from '../PizzaDetails/PizzaDetails';\r\nimport { SoupDetails } from '../SoupDetails/SoupDetails';\r\nimport { SandwichDetails } from '../SandwichDetails/SandwichDetails';\r\nimport { postFormValues } from '../../api/api';\r\nimport { \r\n    initialValues, \r\n    InputsValues, \r\n    FormValidation, \r\n    validatedValues,\r\n    DISH_TYPE,\r\n    dishTypes,\r\n    InputEvent,\r\n} from '../../utils/types';\r\nimport {\r\n    Container,\r\n    FieldsWrapper,\r\n    Header,\r\n    Label,\r\n    Input,\r\n    TimeInput,\r\n    Select,\r\n    StyledOption,\r\n    ButtonsWrapper,\r\n    SubmitButton,\r\n    ClearButton\r\n} from './Form.styles';\r\n\r\n\r\nexport const Form: React.FC = () => {\r\n    const [inputsValues, setInputsValues] = useState<InputsValues>(initialValues);\r\n    const [isValidated, setIsValidated] = useState<FormValidation>(validatedValues);\r\n\r\n    const postForm = async() => {\r\n        try {\r\n            await postFormValues(inputsValues);\r\n        } catch (error) {\r\n            console.warn(error);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (event: InputEvent) => {\r\n        const {value, id} = event.target;\r\n        if (value === DISH_TYPE.PIZZA) {\r\n            setInputsValues({\r\n                ...inputsValues,\r\n                slicesOfBread: undefined,\r\n                spicinessScale: undefined,\r\n                [id]: value,\r\n            });\r\n        } else if (value === DISH_TYPE.SOUP) {\r\n            setInputsValues({\r\n                ...inputsValues,\r\n                noOfSlices: undefined,\r\n                diameter: undefined,\r\n                slicesOfBread: undefined,\r\n                [id]: value,\r\n            });\r\n        } else if (value === DISH_TYPE.SANDWICH) {\r\n            setInputsValues({\r\n                ...inputsValues,\r\n                spicinessScale: undefined,\r\n                noOfSlices: undefined,\r\n                diameter: undefined,\r\n                [id]: value,\r\n            });\r\n        } else {\r\n            setInputsValues({\r\n                ...inputsValues,\r\n                [id]: value,\r\n            });\r\n        }\r\n    };\r\n\r\n    const validateInput = (event: InputEvent) => {\r\n        const isValueEmpty = event.target.value.trim() === '';\r\n        setIsValidated({...isValidated, [event.target.id]: !isValueEmpty})\r\n    };\r\n\r\n\r\n    const isFormValid =\r\n        !!inputsValues.name.trim()\r\n        && !!inputsValues.preparationTime\r\n        && !!inputsValues.type \r\n        && ((inputsValues.type === DISH_TYPE.PIZZA \r\n            && !!inputsValues.noOfSlices && !!inputsValues.diameter) \r\n            || (inputsValues.type === DISH_TYPE.SOUP\r\n                && !!inputsValues.spicinessScale) \r\n                || (inputsValues.type === DISH_TYPE.SANDWICH\r\n                    && !!inputsValues.slicesOfBread));\r\n    \r\n    const handleSubmit = () => {\r\n        const submitValidatedForm = () => {\r\n          postForm();\r\n        };\r\n\r\n        isFormValid && submitValidatedForm();\r\n        setInputsValues(initialValues);\r\n        setIsValidated(validatedValues);\r\n    };\r\n\r\n    const clearForm = () => {\r\n        setInputsValues(initialValues);\r\n        setIsValidated(validatedValues);\r\n    };\r\n\r\n    return (\r\n        <Container backgroundType={inputsValues.type}>\r\n            <FieldsWrapper>\r\n                <Header>Order your dish</Header>\r\n                <Label isCorrect={isValidated.name}>Name</Label>\r\n                <Input \r\n                    id={'name'}\r\n                    value={inputsValues.name}\r\n                    onChange={handleInputChange}\r\n                    onBlur={validateInput}\r\n                    isCorrect={isValidated.name}\r\n                />\r\n                <Label isCorrect={isValidated.preparationTime}>Preparation time</Label>\r\n                <TimeInput\r\n                    type={'time'}\r\n                    step={2}\r\n                    id={'preparationTime'}\r\n                    value={inputsValues.preparationTime}\r\n                    onChange={handleInputChange}\r\n                    onBlur={validateInput}\r\n                    isCorrect={isValidated.preparationTime}\r\n                />\r\n                <Label isCorrect={isValidated.type}>Dish type</Label>\r\n                <Select\r\n                    id={'type'}\r\n                    value={inputsValues.type}\r\n                    onChange={handleInputChange}\r\n                    onBlur={validateInput}\r\n                    isCorrect={isValidated.type}\r\n                >\r\n                    {dishTypes.map(dishType => {\r\n                        return (\r\n                            <StyledOption \r\n                                disabled={dishType.label === 'Dish type'} \r\n                                value={dishType.value} \r\n                                key={dishType.value}\r\n                            >\r\n                                {dishType.label}\r\n                            </StyledOption>\r\n                        )\r\n                    })}\r\n                </Select>\r\n                {inputsValues.type === DISH_TYPE.PIZZA && (\r\n                    <PizzaDetails \r\n                        inputsValues={inputsValues} \r\n                        onInputChange={handleInputChange}\r\n                        validateInput={validateInput}\r\n                        isValid={isValidated}\r\n                    />\r\n                )}\r\n                {inputsValues.type === DISH_TYPE.SOUP && (\r\n                    <SoupDetails \r\n                        inputsValues={inputsValues} \r\n                        onInputChange={handleInputChange}\r\n                        validateInput={validateInput}\r\n                        isValid={isValidated}\r\n                    />\r\n                )}\r\n                {inputsValues.type === DISH_TYPE.SANDWICH && (\r\n                    <SandwichDetails \r\n                        inputsValues={inputsValues} \r\n                        onInputChange={handleInputChange}\r\n                        validateInput={validateInput}\r\n                        isValid={isValidated}\r\n                    />\r\n                )}\r\n                <ButtonsWrapper>\r\n                    <SubmitButton onClick={handleSubmit} disabled={!isFormValid}>\r\n                        Submit\r\n                    </SubmitButton>\r\n                    <ClearButton onClick={clearForm}>\r\n                        Clear\r\n                    </ClearButton>\r\n                </ButtonsWrapper>\r\n            </FieldsWrapper>\r\n        </Container>\r\n    );\r\n};","import React from 'react';\r\nimport { Form } from './components/Form/Form';\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n      <Form />\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}